# Copyright (c) 2023 Forschungszentrum Juelich GmbH.
# This file is part of LLview. 
#
# This is an open source software distributed under the GPLv3 license. More information see the LICENSE file at the top level.
#
# Contributions must follow the Contributor License Agreement. More information see the CONTRIBUTING.md file at the top level.
#
# Contributors:
#    Wolfgang Frings (Forschungszentrum Juelich GmbH) 

jobstate:
  tables:
    - table:
        name: queuedjobs
        options:
          update:
            LML: jobs
            LLgenDB: get_jobnodemap, get_jobtsmap
          archive:
            non_existent: currentjobs_deferred/jobid
            limit: max(ts)-72h
          index: jobid,ts
        columns: 
          - { name: jobid,           type: jobid_t,           LML_from: step,            LML_default: 'unknown' }
          - { name: ts,              type: ts_t,              LML_from: ts,              LML_default: -1,         LML_minlastinsert: mintsinserted }
          - { name: owner,           type: owner_t,           LML_from: owner,           LML_default: 'unknown' }
          - { name: jgroup,          type: jgroup_t,          LML_from: group,           LML_default: 'unknown' }
          - { name: jstatus,         type: jstatus_t,         LML_from: status,          LML_default: 'UNKNOWN' }
          - { name: detailedstatus,  type: detailedstatus_t,  LML_from: detailedstatus,  LML_default: 'UNKNOWN' }
          - { name: state,           type: jstatus_t,         LML_from: state,           LML_default: 'unknown' }
          - { name: wall,            type: wall_t,            LML_from: wall,            LML_default: 0 }
          - { name: wallsoft,        type: wall_t,            LML_from: wallsoft,        LML_default: 0 }
          - { name: queuedate,       type: date_t,            LML_from: queuedate,       LML_default: "-" }
          - { name: name,            type: name_t,            LML_from: name,            LML_default: "-" }
          - { name: comment,         type: comment_t,         LML_from: comment,         LML_default: "-" }
          - { name: totalcores,      type: cores_t,           LML_from: totalcores,      LML_default: 0 }
          - { name: totaltasks,      type: tasks_t,           LML_from: totaltasks,      LML_default: 0 }
          - { name: totalgpus,       type: tasks_t,           LML_from: totalgpus,       LML_default: 0 }
          - { name: tpt,             type: tasks_t,           LML_from: tpt,             LML_default: 0 }
          - { name: queue,           type: queue_t,           LML_from: queue,           LML_default: "-" }
          - { name: dependency,      type: dependency_t,      LML_from: dependency,      LML_default: "" }
          - { name: qos,             type: qos_t,             LML_from: qos,             LML_default: "-" }
          - { name: command,         type: command_t,         LML_from: command,         LML_default: "-" }
          - { name: classprio,       type: prio_t,            LML_from: classprio,       LML_default: "-" }
          - { name: groupprio,       type: prio_t,            LML_from: groupprio,       LML_default: "-" }
          - { name: userprio,        type: prio_t,            LML_from: userprio,        LML_default: "-" }
          - { name: sysprio,         type: prio_t,            LML_from: sysprio,         LML_default: "-" }
          - { name: favored,         type: favored_t,         LML_from: favored,         LML_default: 0 }
          - { name: restart,         type: restart_t,         LML_from: restart,         LML_default: 0 }
          - { name: account,         type: account_t,         LML_from: account,         LML_default: 0 }
          - { name: runtime,         type: time_t,            LML_from: runtime,         LML_default: 0 }
          - { name: starttime,       type: date_t,            LML_from: starttime,       LML_default: "" }
          - { name: endtime,         type: date_t,            LML_from: endtime,         LML_default: "" }
          - { name: numnodes,        type: tasks_t,           LML_from: numnodes,        LML_default: 0 }
          - { name: reason,          type: comment_t,         LML_from: reason,          LML_default: "" }
          - { name: reason_nr,       type: cnt_t,             LML_from: reason_nr,       LML_default: -1 }
          - { name: ArrayJobId,      type: jobid_t,           LML_from: ArrayJobId,      LML_default: "" }
          - { name: ArrayTaskId,     type: jobid_t,           LML_from: ArrayTaskId,     LML_default: "" }
          - { name: waittime,        type: hour_t,            LML_from: waittime,        LML_default: 0 }
          - { name: timetostart,     type: hour_t,            LML_from: timetostart,     LML_default: 0 }
          - { name: posinqueue,      type: pos_t,             LML_from: posinqueue,      LML_default: "" }
          - { name: chainid,         type: chainid_t,         LML_from: chainid,         LML_default: "" }
          - { name: wf_id,           type: jobid_t,           LML_from: wf_id,           LML_default: "" }
          - { name: wf_jid,          type: jobid_t,           LML_from: wf_jid,          LML_default: "" }
          - { name: wf_type,         type: shortstr_t,        LML_from: wf_type,         LML_default: "" }
          - { name: nodelist,        type: extralongstr_t,    LML_from: nodelist,        LML_default: "" }
          - { name: vnodelist,       type: extralongstr_t,    LML_from: vnodelist,       LML_default: "" }
          - { name: NODES,           type: extralongstr_t,    LML_from: NODES,           LML_default: "" }
          - { name: GPUNODES,        type: extralongstr_t,    LML_from: GPUNODES,        LML_default: "" }
          - { name: resid,           type: resid_t,           LML_from: reservation,     LML_default: "" }


          
    # additional common tables jobmapts, jobmapnode 
    %include "../conf_common/jobmap_tables.yaml"

          
    - table:
        name: currentjobs
        options:
          update:
            LML: jobs
            mode: replace
        columns: 
          - { name: jobid,           type: jobid_t,           LML_from: step,            LML_default: 'unknown' }

         
    - table:
        name: currentjobs_ts
        options:
          update:
            LML: jobs
          update_trigger:
            - currentjobs_deferred
            - currentjobs_deferred_by_owner_account
            - currentwf_deferred
            - currentjobs_nodelist
            - workflow_map
            - stat_by_queue_ts
            - stat_time_aggr_queue_ts
          archive:
            limit: max(ts)-1h
        columns: 
          - { name: jobid,           type: jobid_t,           LML_from: step,            LML_default: 'unknown' }
          - { name: ts,              type: ts_t,              LML_from: ts,              LML_default: -1,         LML_minlastinsert: mintsinserted  }
          
    - table:
        name: currentjobs_deferred
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM currentjobs_deferred;
                   INSERT INTO currentjobs_deferred (jobid,firstts,lastts,lastupdts,finished)
                                                    SELECT
                                                      jobid, min(ts), max(ts),
                                                      mintsinserted,
                                                      (max(ts)<(mintsinserted-2*60))
                                                    FROM currentjobs_ts WHERE (ts >= mintsinserted-15*60)
                                                    GROUP by jobid
              sqldebug: 0
          index: jobid
        columns: 
          - { name: jobid,           type: jobid_t }
          - { name: firstts,         type: ts_t    }
          - { name: lastts,          type: ts_t    }
          - { name: lastupdts,       type: ts_t    }
          - { name: finished,        type: flag_t    }

    - table:
        name: currentjobs_deferred_by_owner_account
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM currentjobs_deferred_by_owner_account;
                   INSERT INTO currentjobs_deferred_by_owner_account (jobid,owner,account)
                                                    SELECT
                                                      c.jobid, 
                                                      q.owner,
                                                      q.account
                                                    FROM currentjobs_deferred c, queuedjobs q
                                                    WHERE (c.jobid=q.jobid) AND (c.lastts=q.ts)
        columns: 
          - { name: jobid,           type: jobid_t }
          - { name: owner,           type: owner_t }
          - { name: account,         type: account_t }
          

    - table:
        name: currentwf_ts
        options:
          update:
            LML: jobs
          archive:
            limit: max(ts)-1h
        columns: 
          - { name: wf_id,           type: jobid_t,           LML_from: step,            LML_default: 'unknown' }
          - { name: ts,              type: ts_t,              LML_from: ts,              LML_default: -1 }
          
    - table:
        name: currentwf_deferred
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM currentwf_deferred;
                   INSERT INTO currentwf_deferred (wf_id,firstts,lastts,lastupdts,finished)
                                                    SELECT
                                                      wf_id, min(ts), max(ts),
                                                      mintsinserted,
                                                      (max(ts)<(mintsinserted-2*60))
                                                    FROM currentwf_ts where (ts >= mintsinserted-15*60)
                                                    GROUP by wf_id
        columns: 
          - { name: wf_id,           type: jobid_t }
          - { name: firstts,         type: ts_t    }
          - { name: lastts,          type: ts_t    }
          - { name: lastupdts,       type: ts_t    }
          - { name: finished,        type: flag_t    }

    - table:
        name: workflow_map
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM workflow_map WHERE jobid IN (select jobid from currentjobs);
                   INSERT INTO workflow_map (wf_id, ts, jobid)
                                                    SELECT q.wf_id, q.ts, q.jobid
                                                    FROM queuedjobs q, currentjobs_ts c
                                                    WHERE q.jobid IN (select jobid from currentjobs)
                                                          AND (q.jobid=c.jobid)  
                                                          AND (q.ts=c.ts)  
                                                          AND (q.wf_id!='-')  
              sqldebug: 0
          archive:
            limit: max(ts)-168h
        columns: 
          - { name: wf_id,           type: jobid_t,          }
          - { name: ts,              type: ts_t              }
          - { name: jobid,           type: jobid_t           }
    %include "./jobs_stat.yaml"
          

          
