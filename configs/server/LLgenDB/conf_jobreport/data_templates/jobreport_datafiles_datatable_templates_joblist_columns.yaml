# Copyright (c) 2023 Forschungszentrum Juelich GmbH.
# This file is part of LLview. 
#
# This is an open source software distributed under the GPLv3 license. More information see the LICENSE file at the top level.
#
# Contributions must follow the Contributor License Agreement. More information see the CONTRIBUTING.md file at the top level.
#
# Contributors:
#    Filipe GuimarÃ£es (Forschungszentrum Juelich GmbH) 

- {
    field: "jobid",
    headerName: "JobID",
    headerTooltip: "Slurm JobID",
    # cellDataType: "text",
    # filter: "agTextColumnFilter",
    pinned: "left",
    sort: "desc",
  }

# Job general info
- {
    headerName: "General Info",
    groupId: "Info",
    children: [
      {
        field: "owner",
        headerName: "Owner", 
        headerTooltip: "User owner of the job",
        cellDataType: "text",
        cellRenderer: "(params) => gen_project_user_link(params,'/data/ll/user','account')",
        cellClass: "text-left",
      },
      {
        field: "account",
        headerName: "Project",
        headerTooltip: "Budget used for job submission" ,
        cellDataType: "text", 
        cellRenderer: "(params) => gen_project_link(params,'/data/ll/user')",
      },
      {
        field: "queue",
        headerName: "Queue",
        cellDataType: "text",
        headerTooltip: "Slurm partition",
      },
      { 
        field: "ld_ndps", 
        cellDataType: "number", 
        headerName: "#Samples", 
        headerTooltip: "Number of (1-minute) data samples stored in database for this job",
        columnGroupShow: "open",
      },
    ]
  }

- { 
    field: "mentor",
    cellDataType: "text", 
    headerName: "Mentor", 
    cellRenderer: "(params) => gen_mentor_link(params,'/data/ll/mentor')",
    headerTooltip: "Mentor of the project" ,
    cellClass: "text-left",
  }

# Job Slurm scheduling info
- {
    headerName: "Scheduler",
    groupId: "Scheduler",
    children: [
      { 
        field: "starttime",
        cellDataType: "dateString",
        headerName: "Start Date",
        headerTooltip: "Start date of the job"
      },
      { 
        field: "ts",
        cellDataType: "dateString",
        headerName: "Last Update",
        headerTooltip: "Date of last update from scheduler or end time of job"
      },
      { 
        field: "endtime",
        columnGroupShow: "open",
        cellDataType: "dateString",
        headerName: "End Date (est)",
        headerTooltip: "End date (or estimate) of the job"
      },
      { 
        field: "wall",
        columnGroupShow: "open",
        # cellDataType: "timeInterval",
        # valueGetter: (params) => {console.log(params.newValue,params.parseValue(params.newValue)) ; return params.parseValue(params.newValue)},
        headerName: "Walltime",
        headerTooltip: "Requested walltime"
      },
      { 
        field: "runtime",
        # valueGetter: "(params) => {console.log("ValueGetter",params); return params.data['runtime'];}",
        headerName: "Runtime",
        cellDataType: "timeInterval",
        # filter: "agNumberColumnFilter",
        headerTooltip: "Overall runtime"
      },
      { 
        field: "numnodes",
        cellDataType: "number",
        headerName: "#Nodes",
        headerTooltip: "Number of nodes used by the job",
      },
      { 
        field: "nsteps",
        headerName: "#Steps",
        cellDataType: "number",
        headerTooltip: "Number of steps within the job",
        columnGroupShow: "open",
      },
      { 
        field: "waittime",
        columnGroupShow: "open",
        // cellDataType: "timeInterval",
        headerName: "Wait Time",
        headerTooltip: "Wait time before job start (difference between start time and submit time)"
      },
      { 
        field: "resid",
        columnGroupShow: "open",
        cellDataType: "text",
        headerName: "Reservation",
        cellClass: "text-left",
        headerTooltip: "Reservation used by the job"
      },
    ]
  }

# Job timings
# - {
#     headerName: "Timings",
#     groupId: "Timings",
#     children: [
#       {
#         field: "firstts",
#         cellDataType: "text",
#         headerName: "\\u{0394}t (first)",
#         headerTooltip: "Time passed since the first job update",
#       },
#       {
#         field: "lastts",
#         cellDataType: "text",
#         headerName: "\\u{0394}t (last)",
#         headerTooltip: "Time passed since the last job update" 
#       }
#     ]
#   }

# CORE Usage                    
- {
    headerName: "Core Usage",
    groupId: "Core_Usage",
    children: [
      {
        field: "usage_avg",
        cellDataType: "number",
        headerName: "Usage",
        valueFormatter: "(params) => round_number(params)",
        cellStyle: "(params) => cell_background_color(params,'cpuscore')",
        headerTooltip: "Average CPU usage (max 200%), 1-min usage average among all job nodes and over time"
      },
      {
        field: "used_cores_avg",
        cellDataType: "number",
        headerName: "#Cores",
        valueFormatter: "(params) => round_number(params)",
        cellClass: "text-right",
        headerTooltip: "Number of cores with usage > 25%, 1-min average among all job nodes and over time"
      },
      {
        field: "used_cores_phys_avg",
        cellDataType: "number",
        headerName: "#PhysCores",
        columnGroupShow: "open",
        valueFormatter: "(params) => round_number(params)",
        cellClass: "text-right",
        headerTooltip: "Number of physical cores with usage > 25%, 1-min average among all job nodes and over time"
      },
      {
        field: "used_cores_logic_avg",
        cellDataType: "number",
        headerName: "#LogicCores",
        columnGroupShow: "open",
        valueFormatter: "(params) => round_number(params)",
        cellClass: "text-right",
        headerTooltip: "Number of logical cores with usage > 25%, 1-min average among all job nodes and over time"
      },
    ]
  }

# Load/Memory
- { 
    headerName: "Load/Memory",
    groupId: "Load/Memory",
    children: [
      {
        field: "load_avg", 
        headerName: "Load", 
        cellDataType: "number",  
        valueFormatter: "(params) => round_number(params)",
        cellStyle: "(params) => cell_background_color(params,'ldscore')",
        headerTooltip: "CPU load, 1-min average among all job nodes and over time"
      },
      {
        field: "used_mem_max",
        cellDataType: "number",
        headerName: "MaxMem",
        valueFormatter: "(params) => round_number(params)",
        cellClass: "text-right",
        headerTooltip: "Maximum used memory by the job across all job nodes and over time (GiB)"
      }
    ]
  }

# GPU
- {
    headerName: "GPU",
    groupId: "GPU",
    children: [
      {
        field: "gpu_usage_avg",
        cellDataType: "number",
        headerName: "GPUUsage",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellStyle: "(params) => cell_background_color(params,'gpu_usage_score')",
        headerTooltip: "Average GPU usage (percent of time one or more kernels was executing)"
      },
      {
        field: "gpu_usage_max",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUMaxUsage",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Max. GPU usage (percent of time one or more kernels was executing)"
      },
      {
        field: "gpu_memu_avg",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUAvgMem",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Average used GPU memory by the job across all job GPUs and over time (GiB)"
      },
      {
        field: "gpu_memu_max",
        cellDataType: "number",
        headerName: "GPUMaxMem",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Maximum used GPU memory by the job across all job GPUs and over time (GiB)"
      },
      {
        field: "gpu_memur_avg",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUAvgMemRate",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Average GPU memory usage rate (percent of time global device memory was beeing read/written)"
      },
      {
        field: "gpu_pu_avg",
        cellDataType: "number",
        headerName: "GPUAvgPower",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Average GPU power usage (W)"
      },
      {
        field: "gpu_pu_max",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUMaxPower",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Maximum GPU power usage (W)"
      },
      {
        field: "gpu_temp_avg",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUAvgTemp.",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Average GPU temperature (&deg;C)"
      },
      {
        field: "gpu_temp_max",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUMaxTemp.",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Maximum GPU temperature (&deg;C)"
      },
      {
        field: "gpu_sclk_avg",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUAvgFreq",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Average GPU streaming clock frequency (MHz)"
      },
      {
        field: "gpu_sclk_max",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUMaxFreq",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Maximum GPU streaming clock frequency (MHz)"
      },
      {
        field: "gpu_clkr_avg",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUAvgClkr",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Average GPU clock throttle reason (1:GpuIdle, 2:AppClkSet, 4:SwPwrCap, 8:HWSlowDown, 16:SyncBoost, 32:SwThermSlDwn, 64:HwThermSlDwn, 128:PwrBrakeSlDw)"
      },
      {
        field: "gpu_clkr_max",
        cellDataType: "number",
        headerName: "GPUMaxClkr",
        cellClass: "text-right",
        headerTooltip: "Maximum GPU clock throttle reason (1:GpuIdle, 2:AppClkSet, 4:SwPwrCap, 8:HWSlowDown, 16:SyncBoost, 32:SwThermSlDwn, 64:HwThermSlDwn, 128:PwrBrakeSlDw)"
      },
      {
        field: "gpu_pcie_tx_avg",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUAvgPCIeTX",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Average transmission rate over PCIe"
      },
      {
        field: "gpu_pcie_tx_max",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUMaxPCIeTX",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Maximum transmission rate over PCIe"
      },
      {
        field: "gpu_pcie_rx_avg",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUAvgPCIeRX",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Average reception rate over PCIe"
      },
      {
        field: "gpu_pcie_rx_max",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUMaxPCIeRX",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Maximum reception rate over PCIe"
      },
      {
        field: "gpu_nvlink_tx_avg",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUAvgNVLTX",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Average transmission rate over NVlink"
      },
      {
        field: "gpu_nvlink_tx_max",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUMaxNVLTX",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Maximum transmission rate over NVlink"
      },
      {
        field: "gpu_nvlink_rx_avg",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUAvgNVLRX",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Average reception rate over NVlink"
      },
      {
        field: "gpu_nvlink_rx_max",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "GPUMaxNVLRX",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Maximum reception rate over NVlink"
      },
      {
        field: "gpu_dcgm_up_avg",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "DCGM",
        valueFormatter: "(params) => round_number(params)",
        cellClass: "text-right",
        headerTooltip: "Average DCGM enabled"
      },
      {
        field: "gpu_dcgm_up_max",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "DCGMmax",
        valueFormatter: "(params) => round_number(params)",
        cellClass: "text-right",
        headerTooltip: "Maximum DCGM enabled"
      },
    ]
  }

# Network
- { 
  headerName: "Network",
  groupId: "Network",
  children: [
      {
        field: "mbinout_avg",
        cellDataType: "number",
        headerName: "IC Data",
        valueFormatter: "(params) => round_number(params)",
        cellClass: "text-right",
        headerTooltip: "Data transferred (in+out) over interconnect, average among all job nodes and over time (MiB/s)"
      },
      {
        field: "pckinout_avg",
        cellDataType: "number",
        headerName: "IC Pck",
        valueFormatter: "(params) => round_number(params)",
        cellClass: "text-right",
        headerTooltip: "Number of packets transferred (in+out) over interconnect, average among all job nodes and over time (M-pck/s)"
      },
    ]
  }

# File system (All)
- { 
      headerName: "I/O",
      groupId: "I/O",
      children: [
      {
        field: "fs_all_Mbw_sum",
        cellDataType: "number",
        columnGroupShow: "closed",
        headerName: "Write",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        cellStyle: "(params) => cell_background_color(params,'fs_all_w_score')",
        headerTooltip: "Total data volume written for all file systems during job run time (GiB)"  },
      {
        field: "fs_all_Mbr_sum",
        cellDataType: "number",
        columnGroupShow: "closed",
        headerName: "Read",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        cellStyle: "(params) => cell_background_color(params,'fs_all_r_score')",
        headerTooltip: "Total data volume read for all file systems during job run time (GiB)"  },
      {
        field: "fs_all_Moc_sum",
        cellDataType: "number",
        columnGroupShow: "closed",
        headerName: "O/C",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Total number of file open/close operations on all file systems during job run time (M)"  },
      {
        field: "fs_home_Mbw_sum",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "HOME Wr",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        cellStyle: "(params) => cell_background_color(params,'fs_home_w_score')",
        headerTooltip: "Total data volume written for HOME during job run time (GiB)"  },
      {
        field: "fs_home_Mbr_sum",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "HOME Rd",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        cellStyle: "(params) => cell_background_color(params,'fs_home_r_score')",
        headerTooltip: "Total data volume read for HOME during job run time (GiB)"  },
      {
        field: "fs_home_Moc_sum",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "HOME OC",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Total number of file open/close operations on HOME during job run time (M)"  },
      {
        field: "fs_project_Mbw_sum",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "PRJ Wr",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        cellStyle: "(params) => cell_background_color(params,'fs_project_w_score')",
        headerTooltip: "Total data volume written for PROJECT during job run time (GiB)"  },
      {
        field: "fs_project_Mbr_sum",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "PRJ Rd",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        cellStyle: "(params) => cell_background_color(params,'fs_project_r_score')",
        headerTooltip: "Total data volume read for PROJECT during job run time (GiB)"  },
      {
        field: "fs_project_Moc_sum",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "PRJ OC",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Total number of file open/close operations on PROJECT during job run time (M)"
        },
      {
        field: "fs_scratch_Mbw_sum",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "SCR Wr",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        cellStyle: "(params) => cell_background_color(params,'fs_scratch_w_score')",
        headerTooltip: "Total data volume written for SCRATCH during job run time (GiB)"
        },
      {
        field: "fs_scratch_Mbr_sum",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "SCR Rd",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        cellStyle: "(params) => cell_background_color(params,'fs_scratch_r_score')",
        headerTooltip: "Total data volume read for SCRATCH during job run time (GiB)"
        },
      {
        field: "fs_scratch_Moc_sum",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "SCR OC",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Total number of file open/close operations on SCRATCH during job run time (GiB)"
        },
      {
        field: "fs_fastdata_Mbw_sum",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "DATA Wr",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        cellStyle: "(params) => cell_background_color(params,'fs_fastdata_w_score')",
        headerTooltip: "Total data volume written for FASTDATA during job run time (GiB)"
        },
      {
        field: "fs_fastdata_Mbr_sum",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "DATA Rd",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        cellStyle: "(params) => cell_background_color(params,'fs_fastdata_r_score')",
        headerTooltip: "Total data volume read for FASTDATA during job run time (GiB)"
      },
      {
        field: "fs_fastdata_Moc_sum",
        cellDataType: "number",
        columnGroupShow: "open",
        headerName: "DATA OC",
        valueFormatter: "(params) => round_number_or_null(params)",
        cellClass: "text-right",
        headerTooltip: "Total number of file open/close operations on FASTDATA during job run time (M)"
      },
    ]
  }

# RC/State
- { 
  headerName: "Status",
  groupId: "Status",
  children: [
      {
        field: "rc_state",
        cellDataType: "text",
        cellStyle: "(params) => cell_color(params,'rc_state_color')",
        headerName: "State",
        headerTooltip: "State of the Job",
      },
      {
        field: "nummsgs",
        cellDataType: "number",
        headerName: "#Err",
        valueFormatter: "(params) => round_number_or_null_int(params)", 
        cellClass: "text-right", 
        cellStyle: "color: red; font-weight: bold", 
        headerTooltip: "Number of error messages from node logs",
      },
      {
        field: "numerrnodes",
        cellDataType: "number",
        headerName: "#ErrNds",
        valueFormatter: "(params) => round_number_or_null_int(params)", 
        cellClass: "text-right", 
        cellStyle: "color: red; font-weight: bold", 
        headerTooltip: "Number of nodes with error messages from node logs",
      },
    ]
  }

# Scores
- {
    field: "total_score",
    cellDataType: "number",
    headerName: "Total Score",
    valueFormatter: "(params) => round_number(params)",
    cellStyle: "(params) => cell_background_color(params,'total_score')",
    headerTooltip: "Total score taking into account the CPU and eventual GPU usages"
  }

# Files
- { 
    headerName: "Reports",
    groupId: "Reports",
    children: [
      {
        field: "htmlfile_reg",
        headerName: "",
        filter: "", 
        cellRenderer: "(params) => create_report_link(params,'html','account','owner')",
        # data_pre: "html_link account owner",
        tooltipValueGetter: "() => 'Show job report'",
        headerTooltip: "Detailed HTML reports",
        floatingFilter: false,
        pinned: "right",
      },
      {
        field: "pdffile_reg",
        headerName: "",
        filter: "", 
        cellRenderer: "(params) => create_report_link(params,'pdf','account','owner')",
        # data_pre: "pdf_link account owner",
        tooltipValueGetter: "() => 'Download job report'",
        headerTooltip: "Detailed PDF reports", 
        floatingFilter: false,
        pinned: "right",
      },
    ]
  }
