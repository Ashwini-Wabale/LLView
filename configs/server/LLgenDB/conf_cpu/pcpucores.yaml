# Copyright (c) 2023 Forschungszentrum Juelich GmbH.
# This file is part of LLview. 
#
# This is an open source software distributed under the GPLv3 license. More information see the LICENSE file at the top level.
#
# Contributions must follow the Contributor License Agreement. More information see the CONTRIBUTING.md file at the top level.
#
# Contributors:
#    Wolfgang Frings (Forschungszentrum Juelich GmbH) 

pcpucoresstate:
  tables:
    # common tables jobmapts, jobmapnode
    %include "../conf_common/jobmap_tables.yaml"
    %include "../conf_common/nodeinfo_tables.yaml"

    #----------------------------
    # tables, filled by LML input
    #----------------------------
    # nodespec
    # - this import is only needed for distinguish between CPU and GPU nodes
    # 
    - table:
        name: nodespec
        options:
          update:
            LML: node
            mode: replace
          index: nodeid
        columns: 
          - { name: nodeid,      type: nodeid_t,   LML_from: id,          LML_default: 'unknown' }
          - { name: ngpus,       type: count_t,    LML_from: gpus,        LML_default: 0 }
          
    #--------------------------------------------------------
    # pcpucores
    # - main import table, contains for each node and each core on a node the usage of the physical and the virtual core
    # 
    - table:
        name: pcpucores
        options:
          update:
            LML: pcoreinfo
            mode: replace
          update_trigger:
            - pcpucores_jobmap_by_nd_ts
            - pcpucores_current_jobid
            - pcpucores_by_jobid_nodeid_coreid_current
            - pcpucores_aggr_jobid_nodeid_coreid_last_avg
            - pcpucores_aggr_jobid_nodeid_coreid_avg
            - pcpucores_aggr_jobid_coreid_avg
            - pcpucores_aggr_jobid_avg
            - pcpucores_pattern_id_map
            - pcpucores_time_aggr_span_avg
            - pcpucores_time_aggr_coreid_span_avg
        columns: 
          - { name: nodeid,      type: nodeid_t,   LML_from: name,        LML_default: 'unknown' }
          - { name: pcoreid,     type: cores_t,    LML_from: core,        LML_default: '-1' }
          - { name: ts,          type: ts_t,       LML_from: ts,          LML_default: -1,  LML_minlastinsert: mintsinserted }
          - { name: usage1,      type: usage_t,    LML_from: usage1,      LML_default: 0 }
          - { name: usage2,      type: usage_t,    LML_from: usage2,      LML_default: 0 }
          

          
    #------------------------------------------
    # table: mapping core usage to current jobs 
    #------------------------------------------
    # pcpucores_by_jobid_nodeid_coreid_current
    # - contain node/core usage for those nodes which are currently used by active jobs
    # - steps:
    #   1. clean table
    #   2. join pcpucores and pcpucores_jobmap_by_nd_ts
    #
    # - size: contains only entries for current active jobs
    #
    - table:
        name: pcpucores_by_jobid_nodeid_coreid_current 
        options:
          update:
            sql_update_contents:
              sqldebug: 0
              vars: mintsinserted
              sql: DELETE FROM pcpucores_by_jobid_nodeid_coreid_current;
                   INSERT INTO pcpucores_by_jobid_nodeid_coreid_current
                              (jobid,ts,nodeid,coreid,usage1,usage2)
                              SELECT jnt.jobid, cc.ts, cc.nodeid, cc.pcoreid, cc.usage1, cc.usage2
                              FROM pcpucores_jobmap_by_nd_ts jnt, pcpucores cc
                              WHERE  (cc.ts = jnt.ts) AND (jnt.nodeid=cc.nodeid)
          index: jobid,nodeid,coreid
        columns: 
          - { name: jobid,       type: jobid_t }
          - { name: ts,          type: ts_t }
          - { name: nodeid,      type: nodeid_t }
          - { name: coreid,      type: cores_t }
          - { name: usage1,      type: usage_t }
          - { name: usage2,      type: usage_t }

        
    #----------------------------------------------------------------
    # derived tables
    #----------------------------------------------------------------
    # pcpucores_aggr_jobid_nodeid_coreid_avg
    # - aggregation over time per job
    # - keep only per job info: min/avg/max of ts and usage
    # - before update of table, the entries for the current jobs will be saved 
    #   into table pcpucores_aggr_jobid_nodeid_coreid_last_avg; the last data is used
    #   to compute new aggregated values for existing jobs (see step 3)
    # - steps:
    # 1. remove info about current jobs
    # 2. compute and insert aggregated values for new jobs
    # 3. compute and insert aggregated values for existing jobs (join with *-last table)
    #
    # - size: contains aggregated info about jobs which ended in the last 2 hours,
    #          this window could be further reduced (e.g. 15min)
    
    - table:
        name: pcpucores_aggr_jobid_nodeid_coreid_avg
        options:
          update:
            sql_update_contents:
              sqldebug: 0
              vars: mintsinserted
              sql:
                   DELETE FROM pcpucores_aggr_jobid_nodeid_coreid_avg
                               WHERE jobid IN (select jobid FROM pcpucores_current_jobid);
                   INSERT INTO pcpucores_aggr_jobid_nodeid_coreid_avg
                               (jobid,ts,ts_min,ts_max,nodeid,coreid,cnt1,usage1_min,usage1_avg,usage1_max,cnt2,usage2_min,usage2_avg,usage2_max)
                               SELECT c.jobid,c.ts,c.ts,c.ts,c.nodeid,c.coreid,1,c.usage1,c.usage1,c.usage1,1,c.usage2,c.usage2,c.usage2
                               FROM pcpucores_by_jobid_nodeid_coreid_current c
                               WHERE c.jobid NOT IN (select DISTINCT jobid FROM pcpucores_aggr_jobid_nodeid_coreid_last_avg);
                   INSERT INTO pcpucores_aggr_jobid_nodeid_coreid_avg
                               (jobid,ts,ts_min,ts_max,nodeid,coreid,cnt1,usage1_min,usage1_avg,usage1_max,cnt2,usage2_min,usage2_avg,usage2_max)
                               SELECT c.jobid,c.ts,l.ts_min,c.ts,c.nodeid,c.coreid,l.cnt1+1,
                                      CASE WHEN l.usage1_min < c.usage1
                                      THEN l.usage1_min
                                      ELSE c.usage1
                                      END,
                                      (l.usage1_avg*l.cnt1 + c.usage1)/(l.cnt1+1),
                                      CASE WHEN l.usage1_max > c.usage1
                                      THEN l.usage1_max
                                      ELSE c.usage1
                                      END,
                                      l.cnt2+1,
                                      CASE WHEN l.usage2_min < c.usage2
                                      THEN l.usage2_min
                                      ELSE c.usage2
                                      END,
                                      (l.usage2_avg*l.cnt2 + c.usage2)/(l.cnt2+1),
                                      CASE WHEN l.usage2_max > c.usage2
                                      THEN l.usage2_max
                                      ELSE c.usage2
                                      END
                               FROM pcpucores_by_jobid_nodeid_coreid_current c,
                                    pcpucores_aggr_jobid_nodeid_coreid_last_avg l
                               WHERE c.jobid=l.jobid AND c.nodeid=l.nodeid AND c.coreid=l.coreid
                                     AND c.jobid IN (select DISTINCT jobid FROM pcpucores_aggr_jobid_nodeid_coreid_last_avg);
          archive:
            limit: max(ts)-2h
          index: jobid,nodeid,coreid
        columns: 
          - { name: jobid,       type: jobid_t }
          - { name: ts,          type: ts_t }
          - { name: ts_min,      type: ts_t }
          - { name: ts_max,      type: ts_t }
          - { name: nodeid,      type: nodeid_t }
          - { name: coreid,      type: cores_t }
          - { name: cnt1,        type: cnt_t }
          - { name: usage1_min,  type: usage_t }
          - { name: usage1_avg,  type: usage_t }
          - { name: usage1_max,  type: usage_t }
          - { name: cnt2,        type: cnt_t }
          - { name: usage2_min,  type: usage_t }
          - { name: usage2_avg,  type: usage_t }
          - { name: usage2_max,  type: usage_t }
          
    #--------------------------------------------------------
    # table: help table for updating avg. info in table above  
    #--------------------------------------------------------
    # pcpucores_aggr_jobid_nodeid_coreid_last_avg
    # - last aggregated data of current jobs
    # - last data is used to compute new aggregated values for existing jobs
    # - steps
    #   1. clean table
    #   2. copy entries of active jobs from pcpucores_aggr_jobid_nodeid_coreid_avg
    #
    # - size: number of active jobs times nodes and cores
    #
    - table:
        name: pcpucores_aggr_jobid_nodeid_coreid_last_avg
        options:
          update:
            sql_update_contents:
              sqldebug: 0
              vars: mintsinserted
              sql:
                   DELETE FROM pcpucores_aggr_jobid_nodeid_coreid_last_avg;
                   INSERT INTO pcpucores_aggr_jobid_nodeid_coreid_last_avg
                               (jobid,ts,ts_min,ts_max,nodeid,coreid,cnt1,usage1_min,usage1_avg,usage1_max,cnt2,usage2_min,usage2_avg,usage2_max)
                               SELECT jobid,ts,ts_min,ts_max,nodeid,coreid,cnt1,usage1_min,usage1_avg,usage1_max,cnt2,usage2_min,usage2_avg,usage2_max
                               FROM pcpucores_aggr_jobid_nodeid_coreid_avg
                               WHERE jobid IN (select jobid FROM pcpucores_current_jobid);
          index: jobid,nodeid,coreid
        columns: 
          - { name: jobid,       type: jobid_t }
          - { name: ts,          type: ts_t }
          - { name: ts_min,      type: ts_t }
          - { name: ts_max,      type: ts_t }
          - { name: nodeid,      type: nodeid_t }
          - { name: coreid,      type: cores_t }
          - { name: cnt1,        type: cnt_t }
          - { name: usage1_min,  type: usage_t }
          - { name: usage1_avg,  type: usage_t }
          - { name: usage1_max,  type: usage_t }
          - { name: cnt2,        type: cnt_t }
          - { name: usage2_min,  type: usage_t }
          - { name: usage2_avg,  type: usage_t }
          - { name: usage2_max,  type: usage_t }

    #--------------------------------------------------------
    # table: further aggregation 
    #         
    #--------------------------------------------------------
    # pcpucores_aggr_jobid_coreid_avg
    # - further aggregation of per core usage per job
    # - aggregation over nodes
    # - steps
    #   1. remove entries of active jobs
    #   2. compute and insert aggregated values for active jobs, set flag about gpu-node from table nodespec
    #
    # - size: entries about all cores of all jobs which ended in the last 3 days
    #         we need that time span to compute later the node-h used by each pattern in this time frame    
    #  
    - table:
        name: pcpucores_aggr_jobid_coreid_avg
        options:
          update:
            sql_update_contents:
              sqldebug: 0
              vars: mintsinserted
              sql:
                   DELETE FROM pcpucores_aggr_jobid_coreid_avg WHERE jobid IN (select jobid FROM pcpucores_current_jobid);
                   INSERT INTO pcpucores_aggr_jobid_coreid_avg
                               (jobid,ts,coreid,
                                cnt1_avg,usage1_min,usage1_avg,usage1_max,
                                cnt2_avg,usage2_min,usage2_avg,usage2_max,
                                gpu,nnodes,wall)
                               SELECT jobid,MAX(ts),coreid,
                                      AVG(cnt1),MIN(usage1_min),AVG(usage1_avg),MAX(usage1_max),
                                      AVG(cnt2),MIN(usage2_min),AVG(usage2_avg),MAX(usage2_max),
                                      SUM(ngpus)>0, COUNT(p.nodeid), (MAX(p.ts_max)-MIN(p.ts_min))/3600.0
                               FROM   pcpucores_aggr_jobid_nodeid_coreid_avg p, nodespec n
                               WHERE p.ts_min>0 AND p.ts_max>0 AND p.nodeid=n.nodeid AND jobid IN (select jobid FROM pcpucores_current_jobid)
                               GROUP BY jobid,coreid;
          index: jobid,ts
          archive:
            limit: max(ts)-3d
        columns: 
          - { name: jobid,       type: jobid_t }
          - { name: ts,          type: ts_t }
          - { name: coreid,      type: cores_t }
          - { name: cnt1_avg,    type: cnt_t }
          - { name: usage1_min,  type: usage_t }
          - { name: usage1_avg,  type: usage_t }
          - { name: usage1_max,  type: usage_t }
          - { name: cnt2_avg,    type: cnt_t }
          - { name: usage2_min,  type: usage_t }
          - { name: usage2_avg,  type: usage_t }
          - { name: usage2_max,  type: usage_t }
          - { name: gpu,         type: cnt_t }
          - { name: nnodes,      type: cnt_t }
          - { name: wall,        type: hour_t }

    #         
    #---------------------------------------
    #  pcpucores_aggr_jobid_avg
    #  - further aggregation over cores
    #  - reassemble current pattern, operations required because patterns of jobs could change
    #     over time   
    #  - steps:
    #    --> maintain table pcpucores_current_pattern  
    #    1. delete all pattern 
    #    2. add patterns of active jobs
    #    3. add patterns of jobs older as 3 days
    #
    #    --> maintain table pcpucores_aggr_jobid_avg
    #    4. delete entries of jobs older than 3 days
    #    5. delete entries of active jobs
    #    6. compute and insert aggregated entries for active jobs
    #
    #    --> maintain table pcpucores_current_pattern
    #    7. delete current patterns
    #    8. insert current patterns
    #
    #    - size: one entry per job which ended in the last 3 days
    
    - table:
        name: pcpucores_aggr_jobid_avg
        options:
          update:
            sql_update_contents:
              sqldebug: 1
              vars: LIMIT=0.05, mintsinserted
              sql:
                   DELETE FROM pcpucores_current_pattern;
                   INSERT INTO pcpucores_current_pattern (pattern)
                        SELECT DISTINCT pattern FROM pcpucores_aggr_jobid_avg
                        WHERE  jobid IN (select jobid FROM pcpucores_current_jobid);
                   INSERT INTO pcpucores_current_pattern (pattern)
                        SELECT DISTINCT pattern FROM pcpucores_aggr_jobid_avg
                        WHERE  jobid IN (SELECT DISTINCT jobid
                                         FROM pcpucores_aggr_jobid_coreid_avg
                                         WHERE (ts < TS_NOW - (3 * 24 * 3600.0) ) ) ;
                   DELETE FROM pcpucores_aggr_jobid_avg WHERE jobid IN (select DISTINCT jobid
                                                                        FROM pcpucores_aggr_jobid_coreid_avg
                                                                        WHERE (ts < TS_NOW - (3 * 24 * 3600.0)));
                   DELETE FROM pcpucores_aggr_jobid_avg WHERE jobid IN (SELECT jobid FROM pcpucores_current_jobid);
                   INSERT INTO pcpucores_aggr_jobid_avg
                               (jobid,cores_lastts,cores_ndps,
                                usage1_min,usage1_avg,usage1_max,usage2_min,usage2_avg,usage2_max,
                                gpu,nnodes,wall,pattern,ncores_used)
                               SELECT jobid,MAX(ts),AVG(cnt1_avg),
                                      MIN(usage1_min),AVG(usage1_avg),MAX(usage1_max),
                                      MIN(usage2_min),AVG(usage2_avg),MAX(usage2_max),
                                      MAX(gpu),MAX(nnodes),MAX(wall),
                                      GROUP_CONCAT(usage1_avg>LIMIT,'')||GROUP_CONCAT(usage2_avg>LIMIT,''),
                                      SUM(usage1_avg>LIMIT)+SUM(usage2_avg>LIMIT)
                               FROM   pcpucores_aggr_jobid_coreid_avg p 
                               WHERE  jobid IN (select jobid FROM pcpucores_current_jobid)
                               GROUP BY jobid;
                   DELETE FROM pcpucores_current_pattern
                        WHERE pattern IN (
                           SELECT distinct pattern FROM pcpucores_aggr_jobid_avg
                           WHERE  jobid IN (select jobid FROM pcpucores_current_jobid) );
                   INSERT INTO pcpucores_current_pattern (pattern)
                        SELECT distinct pattern FROM pcpucores_aggr_jobid_avg
                        WHERE  jobid IN (select jobid FROM pcpucores_current_jobid)
          index: jobid,pattern
          archive:
            limit: max(cores_lastts)-3d
        columns: 
          - { name: jobid,        type: jobid_t }
          - { name: cores_lastts, type: ts_t }
          - { name: cores_ndps,   type: cnt_t }
          - { name: usage1_min,   type: usage_t }
          - { name: usage1_avg,   type: usage_t }
          - { name: usage1_max,   type: usage_t }
          - { name: usage2_min,   type: usage_t }
          - { name: usage2_avg,   type: usage_t }
          - { name: usage2_max,   type: usage_t }
          - { name: gpu,          type: cnt_t }
          - { name: nnodes,       type: cnt_t }
          - { name: wall,         type: hour_t }
          - { name: ncores_used,  type: cnt_t }
          - { name: pattern,      type: llongstr_t }

    #---------------------------------------
    # table: id to pattern mapping
    #---------------------------------------
    # pcpucores_pattern_id_map
    # - id to pattern mapping
    # - primary key (automatic increase of id)
    # 
    # size: growing, not limited (maybe an issue)
     
    - table:
        name: pcpucores_pattern_id_map
        options:
          update:
            sql_update_contents:
              sqldebug: 1
              sql:
                   INSERT INTO pcpucores_pattern_id_map (pattern)
                               SELECT distinct pattern 
                               FROM   pcpucores_aggr_jobid_avg
                               WHERE  pattern NOT IN (select pattern FROM pcpucores_pattern_id_map);
                               DELETE FROM pcpucores_pattern_id_map WHERE pattern NOT IN
                                      ( SELECT DISTINCT pattern FROM pcpucores_aggr_jobid_avg);
          index: pattern
        columns: 
          - { name: id,       type: primary_key_t }
          - { name: pattern,  type: llongstr_t }

          
    #---------------------------------------------
    # table: per pattern statistics
         
    #        
    #---------------------------------------------
    # pcpucores_time_aggr_coreid_span_avg
    # - usage statistics per usage pattern
    # - aggr. last 3 days  (end time of job)
    #
    # - steps:
    #   1. delete entries for current patterns
    #   2. compute and add entries for current patterns
    
    - table:
        name: pcpucores_time_aggr_span_avg
        options:
          update:
            sql_update_contents:
              sqldebug: 1
              vars: mintsinserted
              sql:
                   DELETE FROM pcpucores_time_aggr_span_avg WHERE pattern IN (select pattern FROM pcpucores_current_pattern);
                   INSERT INTO pcpucores_time_aggr_span_avg
                               (pid,pattern,gpu,min_ts,max_ts,
                                usage1_min,usage1_avg,usage1_max,usage2_min,usage2_avg,usage2_max,
                                nodeh,njobs,ncores_used,jobids)
                               SELECT m.id, p.pattern, p.gpu,
                                      MIN(p.cores_lastts),MAX(p.cores_lastts),
                                      MIN(p.usage1_min),AVG(p.usage1_avg),MAX(p.usage1_max),
                                      MIN(p.usage2_min),AVG(p.usage2_avg),MAX(p.usage2_max),
                                      SUM(p.nnodes * p.wall),
                                      count(p.jobid),MAX(p.ncores_used),
                                      GROUP_CONCAT(p.jobid,' ')
                               FROM   pcpucores_aggr_jobid_avg p, pcpucores_pattern_id_map m
                               WHERE  p.pattern IN (select pattern FROM pcpucores_current_pattern) AND
                                      p.pattern=m.pattern AND p.cores_lastts >= TS_NOW - (3 * 24 * 3600.0)
                               GROUP BY p.pattern,p.gpu;
          index: pattern
        columns: 
          - { name: pid,          type: int_t }
          - { name: pattern,      type: llongstr_t }
          - { name: gpu,          type: cnt_t }
          - { name: min_ts,       type: ts_t }
          - { name: max_ts,       type: ts_t }
          - { name: usage1_min,   type: usage_t }
          - { name: usage1_avg,   type: usage_t }
          - { name: usage1_max,   type: usage_t }
          - { name: usage2_min,   type: usage_t }
          - { name: usage2_avg,   type: usage_t }
          - { name: usage2_max,   type: usage_t }
          - { name: nodeh,        type: cnt_f_t }
          - { name: njobs,        type: cnt_t }
          - { name: ncores_used,  type: cnt_t }
          - { name: jobids,       type: extralongstr_t }

          
    #---------------------------------------------------
    # table: per core usage statistics per usage pattern
    #        aggr. per day (end time of job) 
    #---------------------------------------------------
    # -- 
    # -- 
    - table:
        name: pcpucores_time_aggr_coreid_span_avg
        options:
          update:
            sql_update_contents:
              sqldebug: 1
              vars: mintsinserted
              sql:
                   DELETE FROM pcpucores_time_aggr_coreid_span_avg WHERE pattern IN (select pattern FROM pcpucores_current_pattern);
                   INSERT INTO pcpucores_time_aggr_coreid_span_avg
                               (pid,pattern,gpu,ts,coreid,
                                usage1_min,usage1_avg,usage1_max,usage2_min,usage2_avg,usage2_max)
                               SELECT m.id, j.pattern, j.gpu,
                                      MIN(c.ts),
                                      c.coreid,
                                      MIN(c.usage1_min),AVG(c.usage1_avg),MAX(c.usage1_max),
                                      MIN(c.usage2_min),AVG(c.usage2_avg),MAX(c.usage2_max)
                               FROM   pcpucores_aggr_jobid_coreid_avg c, pcpucores_aggr_jobid_avg j, pcpucores_pattern_id_map m
                               WHERE  j.pattern IN (select pattern FROM pcpucores_current_pattern) AND
                                      c.jobid=j.jobid  AND j.pattern=m.pattern  AND j.cores_lastts >= TS_NOW-(3 * 24 * 3600.0)
                               GROUP BY j.pattern,j.gpu,c.coreid;
                   DELETE FROM pcpucores_time_aggr_coreid_span_avg
                          WHERE pattern NOT IN (SELECT pattern FROM pcpucores_aggr_jobid_avg);                               
          index: pattern
        columns: 
          - { name: pid,          type: int_t }
          - { name: pattern,      type: llongstr_t }
          - { name: gpu,          type: cnt_t }
          - { name: ts,           type: ts_t }
          - { name: coreid,       type: cores_t }
          - { name: usage1_min,   type: usage_t }
          - { name: usage1_avg,   type: usage_t }
          - { name: usage1_max,   type: usage_t }
          - { name: usage2_min,   type: usage_t }
          - { name: usage2_avg,   type: usage_t }
          - { name: usage2_max,   type: usage_t }

          
    #----------------------------
    # temp. tables to speed joins 
    #----------------------------
    - table:
        name: pcpucores_jobmap_by_nd_ts
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM pcpucores_jobmap_by_nd_ts;
                   INSERT INTO pcpucores_jobmap_by_nd_ts
                        SELECT jt.jobid, jn.nodeid, jt.ts
                               FROM jobnodemap jn, jobtsmap jt
                               WHERE (jt.ts >= mintsinserted) AND (jt.jobid=jn.jobid);
          update_trigger:
        columns: 
          - { name: jobid,    type: jobid_t }
          - { name: nodeid,   type: nodeid_t }
          - { name: ts,       type: ts_t    }
    - table:
        name: pcpucores_current_jobid
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM pcpucores_current_jobid;
                   INSERT INTO pcpucores_current_jobid (jobid)
                        SELECT jt.jobid FROM jobtsmap jt WHERE (jt.ts >= mintsinserted);
          update_trigger:
        columns: 
          - { name: jobid,    type: jobid_t }

    #---------------------------------------------------
    # table: help table
    #---------------------------------------------------
    # pcpucores_current_pattern
    # - table contain pattern which are affected by the last add operation 
    #
    - table:
        name: pcpucores_current_pattern
        options:
        columns: 
          - { name: pattern,      type: llongstr_t }

# select count(*) from pcpucores_time_aggr_span_avg where pattern not in (select distinct pattern from pcpucores_aggr_jobid_avg);
          
# cleanup files (workaround)
# cd ~/s1/perm/db/
# sqlite3 LLmonDB_jobreport_stat_sysstat.sqlite
# > select name,count(*),min(lastts_saved),max(lastts_saved) from datasetstat group by name;
#  (take max(lastts_saved) for next select)
# > select count(*) from datasetstat where lastts_saved < 1707335229-3*24*3600 and name="syscorepattern_csv";
# > delete from datasetstat where lastts_saved < 1707335229-3*24*3600 and name="syscorepattern_csv";
#
# cd ~/s1/tmp/jobreport/data/_sysstat
# find . -name "syscorepattern*" -mtime +3 -ls| wc -l
# find . -name "syscorepattern*" -mtime +3 -exec rm {} \;
#
# finally there has to be implemented a new action 'remove' for LML_DBarch.pl
