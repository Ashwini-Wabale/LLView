# Copyright (c) 2023 Forschungszentrum Juelich GmbH.
# This file is part of LLview. 
#
# This is an open source software distributed under the GPLv3 license. More information see the LICENSE file at the top level.
#
# Contributions must follow the Contributor License Agreement. More information see the CONTRIBUTING.md file at the top level.
#
# Contributors:
#    Wolfgang Frings (Forschungszentrum Juelich GmbH) 

- table:
    name: loadmem_aggr_by_ts_maxmem_node_cls
    options:
      update:
        sql_update_contents:
          vars: mintsinserted
          sql: DELETE FROM loadmem_aggr_by_ts_maxmem_node_cls WHERE (ts >= mintsinserted);
               INSERT INTO loadmem_aggr_by_ts_maxmem_node_cls
                                 (ts,memcls,n_1,n_2,n_3,n_4,n_5,n_6,n_7,n_8,n_9,n_10,n_12,n_16,n_24,
                                  n_32,n_48,n_64,n_96,n_128,n_192,n_256,n_384,n_512,n_768,
                                  n_1024,n_2048,n_4096,n_8192,n_all)
                                              SELECT ts,
                                                     CASE WHEN ( used_mem_max <= 16384 ) THEN "0016"
                                                          WHEN ( used_mem_max <= 32768 ) THEN "0032"
                                                          WHEN ( used_mem_max <= 65536 ) THEN "0064"
                                                          WHEN ( used_mem_max <= 98304 ) THEN "0096"
                                                          WHEN ( used_mem_max <= 131072 ) THEN "0128"
                                                          WHEN ( used_mem_max <= 196608 ) THEN "0192"
                                                          WHEN ( used_mem_max <= 262144 ) THEN "0256"
                                                          WHEN ( used_mem_max <= 393216 ) THEN "0384"
                                                          WHEN ( used_mem_max <= 524288 ) THEN "0512"
                                                          ELSE "1024"
                                                     END memcls,
                                                     1.0*SUM(CASE WHEN numnodes=1 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes=2 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes=3 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes=4 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes=5 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes=6 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes=7 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes=8 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes=9 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes=10 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>10 AND numnodes<=12 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>12 AND numnodes<=16 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>16 AND numnodes<=24 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>24 AND numnodes<=32 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>32 AND numnodes<=48 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>48 AND numnodes<=64 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>64 AND numnodes<=96 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>96 AND numnodes<=128 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>128 AND numnodes<=192 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>192 AND numnodes<=256 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>256 AND numnodes<=384 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>384 AND numnodes<=512 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>512 AND numnodes<=768 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>768 AND numnodes<=1024 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>1024 AND numnodes<=2048 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>2048 AND numnodes<=4096 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(CASE WHEN numnodes>4096 AND numnodes<=8192 THEN numnodes ELSE 0 END),
                                                     1.0*SUM(numnodes)
                                                     FROM loadmem_aggr_by_jobid_ts
                                                     WHERE (ts >= mintsinserted)
                                                     GROUP by ts,memcls; 
               INSERT INTO loadmem_aggr_by_ts_maxmem_node_cls
                                 (ts,memcls,n_1,n_2,n_3,n_4,n_5,n_6,n_7,n_8,n_9,n_10,n_12,n_16,n_24,
                                  n_32,n_48,n_64,n_96,n_128,n_192,n_256,n_384,n_512,n_768,
                                  n_1024,n_2048,n_4096,n_8192,n_all)
                                  SELECT ts,"all",
                                     SUM(n_1),SUM(n_2),SUM(n_3),SUM(n_4),
                                     SUM(n_5),SUM(n_6),SUM(n_7),SUM(n_8),
                                     SUM(n_9),SUM(n_10),SUM(n_12),SUM(n_16),
                                     SUM(n_24),SUM(n_32),SUM(n_48),SUM(n_64),
                                     SUM(n_96),SUM(n_128),SUM(n_192),SUM(n_256),
                                     SUM(n_384),SUM(n_512),SUM(n_768),SUM(n_1024),
                                     SUM(n_2048),SUM(n_4096),SUM(n_8192),SUM(n_all)
                                  FROM loadmem_aggr_by_ts_maxmem_node_cls
                                  WHERE (ts >= mintsinserted)
                                  GROUP by ts; 
      archive:
        limit: max(ts)-72h
      index: ts,memcls
    columns: 
      - { name: ts,              type: ts_t }
      - { name: memcls,          type: shortstr_t }
      - { name: n_1,              type: float_t }
      - { name: n_2,              type: float_t }
      - { name: n_3,              type: float_t }
      - { name: n_4,              type: float_t }
      - { name: n_5,              type: float_t }
      - { name: n_6,              type: float_t }
      - { name: n_7,              type: float_t }
      - { name: n_8,              type: float_t }
      - { name: n_9,              type: float_t }
      - { name: n_10,             type: float_t }
      - { name: n_12,             type: float_t }
      - { name: n_16,             type: float_t }
      - { name: n_24,             type: float_t }
      - { name: n_32,             type: float_t }
      - { name: n_48,             type: float_t }
      - { name: n_64,             type: float_t }
      - { name: n_96,             type: float_t }
      - { name: n_128,            type: float_t }
      - { name: n_192,            type: float_t }
      - { name: n_256,            type: float_t }
      - { name: n_384,            type: float_t }
      - { name: n_512,            type: float_t }
      - { name: n_768,            type: float_t }
      - { name: n_1024,           type: float_t }
      - { name: n_2048,           type: float_t }
      - { name: n_4096,           type: float_t }
      - { name: n_8192,           type: float_t }
      - { name: n_all,            type: float_t }
     
- table:
    name: loadmem_heatmap_node_mem_cls
    options:
      update:
        sql_update_contents:
          sqldebug: 0
          sql: DELETE FROM loadmem_heatmap_node_mem_cls;
               WITH tblCTE AS (SELECT SUM(n_all) AS TOTALSUM FROM loadmem_aggr_by_ts_maxmem_node_cls WHERE memcls!="all")
               INSERT INTO loadmem_heatmap_node_mem_cls
                                 (memcls,n_1,n_2,n_3,n_4,n_5,n_6,n_7,n_8,n_9,n_10,n_12,n_16,n_24,
                                  n_32,n_48,n_64,n_96,n_128,n_192,n_256,n_384,n_512,n_768,
                                  n_1024,n_2048,n_4096,n_8192,n_all)
                                  SELECT memcls,
                                     SUM(n_1)/TOTALSUM,SUM(n_2)/TOTALSUM,SUM(n_3)/TOTALSUM,SUM(n_4)/TOTALSUM,
                                     SUM(n_5)/TOTALSUM,SUM(n_6)/TOTALSUM,SUM(n_7)/TOTALSUM,SUM(n_8)/TOTALSUM,
                                     SUM(n_9)/TOTALSUM,SUM(n_10)/TOTALSUM,SUM(n_12)/TOTALSUM,SUM(n_16)/TOTALSUM,
                                     SUM(n_24)/TOTALSUM,SUM(n_32)/TOTALSUM,SUM(n_48)/TOTALSUM,SUM(n_64)/TOTALSUM,
                                     SUM(n_96)/TOTALSUM,SUM(n_128)/TOTALSUM,SUM(n_192)/TOTALSUM,SUM(n_256)/TOTALSUM,
                                     SUM(n_384)/TOTALSUM,SUM(n_512)/TOTALSUM,SUM(n_768)/TOTALSUM,SUM(n_1024)/TOTALSUM,
                                     SUM(n_2048)/TOTALSUM,SUM(n_4096)/TOTALSUM,SUM(n_8192)/TOTALSUM,SUM(n_all)/TOTALSUM
                                  FROM loadmem_aggr_by_ts_maxmem_node_cls, tblCTE
                                  GROUP BY memcls;
                                  
    columns: 
      - { name: memcls,           type: shortstr_t }
      - { name: n_1,              type: float_t }
      - { name: n_2,              type: float_t }
      - { name: n_3,              type: float_t }
      - { name: n_4,              type: float_t }
      - { name: n_5,              type: float_t }
      - { name: n_6,              type: float_t }
      - { name: n_7,              type: float_t }
      - { name: n_8,              type: float_t }
      - { name: n_9,              type: float_t }
      - { name: n_10,             type: float_t }
      - { name: n_12,             type: float_t }
      - { name: n_16,             type: float_t }
      - { name: n_24,             type: float_t }
      - { name: n_32,             type: float_t }
      - { name: n_48,             type: float_t }
      - { name: n_64,             type: float_t }
      - { name: n_96,             type: float_t }
      - { name: n_128,            type: float_t }
      - { name: n_192,            type: float_t }
      - { name: n_256,            type: float_t }
      - { name: n_384,            type: float_t }
      - { name: n_512,            type: float_t }
      - { name: n_768,            type: float_t }
      - { name: n_1024,           type: float_t }
      - { name: n_2048,           type: float_t }
      - { name: n_4096,           type: float_t }
      - { name: n_8192,           type: float_t }
      - { name: n_all,            type: float_t }

