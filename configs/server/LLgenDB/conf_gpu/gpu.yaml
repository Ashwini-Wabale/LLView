# Copyright (c) 2023 Forschungszentrum Juelich GmbH.
# This file is part of LLview. 
#
# This is an open source software distributed under the GPLv3 license. More information see the LICENSE file at the top level.
#
# Contributions must follow the Contributor License Agreement. More information see the CONTRIBUTING.md file at the top level.
#
# Contributors:
#    Wolfgang Frings (Forschungszentrum Juelich GmbH) 

gpustate:
  tables:
    
    # additional common tables jobmapts, jobmapnode 
    %include "../conf_common/jobmap_tables.yaml"
    %include "../conf_common/nodeinfo_tables.yaml"

    #---------------------------
    # table, filled by LML input
    #---------------------------


    - table:
        name: gpu
        options:
          update:
            LML: gpunode
            LLgenDB: set_node2nid(nodeid,nodeinfo,nodeid,nid)
            mode: add
          update_trigger:
            - gpu_aggr_by_ts
            - node_update_status
            - gpu_aggr_by_node
            - gpu_current_jobid
            - gpu_jobmap_by_nd_ts
            - gpu_by_jobid_nodeid_gpuid_ts
            - gpu_aggr_by_jobid_nodeid_gpuid
            - gpu_aggr_by_jobid_ts
            - gpu_aggr_by_jobid
            - currentjobs_gpulist
            - currentjobs_gpuspec
            - gpu_history_failed_node_exporter
          archive:
            limit: max(ts)-25h
          index: nodeid,gpuid,ts
        columns: 
          - { name: nodeid       , type: nodeid_t,  LML_from: pid        , LML_default: 'unknown' }
          - { name: gpuid        , type: nodeid_t,  LML_from: id         , LML_default: 'unknown' }
          - { name: ts           , type: ts_t,      LML_from: gpu_ts     , LML_default: -1,  LML_minlastinsert: mintsinserted}
          - { name: gpu_clk      , type: clk_t,     LML_from: gpu_clk    , LML_default: 0 }
          - { name: gpu_clkr     , type: clkr_t,    LML_from: gpu_clkr   , LML_default: 0 }
          - { name: gpu_memf     , type: mem_t,     LML_from: gpu_memf   , LML_default: 0 }
          - { name: gpu_memt     , type: mem_t,     LML_from: gpu_memt   , LML_default: 0 }
          - { name: gpu_memu     , type: mem_t,     LML_from: gpu_memu   , LML_default: 0 }
          - { name: gpu_memur    , type: rate_t,    LML_from: gpu_memur  , LML_default: 0 }
          - { name: gpu_pu       , type: power_t,   LML_from: gpu_pu     , LML_default: 0 }
          - { name: gpu_sclk     , type: clk_t,     LML_from: gpu_sclk   , LML_default: 0 }
          - { name: gpu_temp     , type: temp_t,    LML_from: gpu_temp   , LML_default: 0 }
          - { name: gpu_active   , type: float_t,   LML_from: gpu_active , LML_default: 0 }
          - { name: gpu_util     , type: rate_t,    LML_from: gpu_util  , LML_default: 0 }
          - { name: gpu_pcie_tx  , type: bytes_t,   LML_from: pcietx     , LML_default: 0 }
          - { name: gpu_pcie_rx  , type: bytes_t,   LML_from: pcierx     , LML_default: 0 }
          - { name: gpu_nvlink_tx, type: bytes_t,   LML_from: nvlinktx   , LML_default: 0 }
          - { name: gpu_nvlink_rx, type: bytes_t,   LML_from: nvlinkrx   , LML_default: 0 }
          - { name: ncores       , type: tasks_t,   LML_from: ncores     , LML_default: 0 }
          - { name: features     , type: feature_t, LML_from: features   , LML_default: 0 }
          - { name: state        ,  type: status_t,  LML_from: state      , LML_default: '-' }

    #-------------------------------
    # tables, containing per ts info
    #-------------------------------
    - table:
        name: gpu_aggr_by_ts
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM gpu_aggr_by_ts WHERE (ts >= mintsinserted);
                   INSERT INTO gpu_aggr_by_ts
                          ( ts,
                           %include "gpu_sql_attrlist_insert.yaml"
                          )
                          SELECT ts,
                          %include "gpu_sql_aggrlist.yaml"
                          FROM gpu where (ts >= mintsinserted)
                          GROUP by ts
              sqldebug: 0
          archive:
            limit: max(ts)-25h
        columns: 
          - { name: ts,               type: ts_t }
          %include "gpu_sql_attrlist.yaml"

    #-----------------------------------
    # tables, containing per nodeid info
    #-----------------------------------
    - table:
        name: gpu_aggr_by_node
        options:
          update:
            # updates only a subset of nodes in one step (full turn in 15 steps)
            sql_update_contents:
              sql: DELETE FROM gpu_aggr_by_node
                          WHERE nodeid IN (
                                       SELECT nodeid FROM nodeinfo, node_update_status
                                       WHERE nid%update_step_max=update_step and step_id=1
                                       );
                   INSERT INTO gpu_aggr_by_node
                                       ( nodeid, gpuid,
                                         %include "gpu_sql_attrlist_insert.yaml"
                                       )
                                       SELECT nodeid, gpuid,
                                              %include "gpu_sql_aggrlist.yaml"
                                       FROM gpu 
                                       WHERE nodeid IN (
                                                         SELECT nodeid FROM nodeinfo, node_update_status
                                                         WHERE nid%update_step_max=update_step and step_id=1
                                                       )
                                       GROUP by nodeid, gpuid
        columns: 
          - { name: nodeid,           type: nodeid_t }
          - { name: gpuid,            type: nodeid_t }
          %include "gpu_sql_attrlist.yaml"


    #----------------------------------
    # tables, containing per jobid info
    #----------------------------------
    - table:
        name: gpu_by_jobid_nodeid_gpuid_ts
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM gpu_by_jobid_nodeid_gpuid_ts WHERE (ts >= mintsinserted);
                   INSERT INTO gpu_by_jobid_nodeid_gpuid_ts
                                       ( jobid, ts, nodeid, gpuid,
                                         gpu_clk , gpu_clkr , gpu_memf , gpu_memt , gpu_memu ,
                                         gpu_memur , gpu_pu ,
                                         gpu_sclk , gpu_temp , gpu_util , gpu_pcie_tx, gpu_pcie_rx,
                                         gpu_nvlink_tx, gpu_nvlink_rx, gpu_active
                                       )
                                       SELECT jnt.jobid, g.ts, g.nodeid, g.gpuid,
                                              gpu_clk , gpu_clkr , gpu_memf , gpu_memt , gpu_memu ,
                                              gpu_memur , gpu_pu ,
                                              gpu_sclk , gpu_temp , gpu_util , gpu_pcie_tx, gpu_pcie_rx,
                                              gpu_nvlink_tx, gpu_nvlink_rx, gpu_active
                                       FROM gpu_jobmap_by_nd_ts jnt, 
                                            gpu g
                                      WHERE  (g.ts >= mintsinserted)
                                            AND (g.ts = jnt.ts) AND (jnt.nodeid=g.nodeid)
          archive:
            limit: max(ts)-25h
          index: jobid,nodeid,gpuid
        columns: 
          - { name: jobid        ,     type: jobid_t }
          - { name: ts           ,     type: ts_t }
          - { name: nodeid       ,     type: nodeid_t  }
          - { name: gpuid        ,     type: nodeid_t  }
          - { name: gpu_clk      ,     type: clk_t     }
          - { name: gpu_clkr     ,     type: clkr_t    }
          - { name: gpu_memf     ,     type: mem_t     }
          - { name: gpu_memt     ,     type: mem_t     }
          - { name: gpu_memu     ,     type: mem_t     }
          - { name: gpu_memur    ,     type: rate_t    }
          - { name: gpu_pu       ,     type: power_t   }
          - { name: gpu_sclk     ,     type: clk_t     }
          - { name: gpu_temp     ,     type: temp_t    }
          - { name: gpu_util     ,     type: rate_t    }
          - { name: gpu_pcie_tx  ,     type: bytes_t   }
          - { name: gpu_pcie_rx  ,     type: bytes_t   }
          - { name: gpu_nvlink_tx,     type: bytes_t   }
          - { name: gpu_nvlink_rx,     type: bytes_t   }
          - { name: gpu_active   ,     type: float_t   }

    - table:
        name: gpu_aggr_by_jobid_ts
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM gpu_aggr_by_jobid_ts WHERE (ts >= mintsinserted);
                   INSERT INTO gpu_aggr_by_jobid_ts
                        ( jobid, ts,
                          %include "gpu_sql_attrlist_insert.yaml"
                        )
                        SELECT jnt.jobid,
                               g.ts,
                               %include "gpu_sql_aggrlist.yaml"
                               FROM gpu_jobmap_by_nd_ts jnt,
                                    gpu g
                               WHERE (g.ts = jnt.ts) and (jnt.nodeid=g.nodeid)
                               GROUP by jnt.jobid;
          archive:
            limit: max(ts)-25h
        columns: 
          - { name: jobid,       type: jobid_t }
          - { name: ts,          type: ts_t    }
          %include "gpu_sql_attrlist.yaml"
          
    - table:
        name: gpu_aggr_by_jobid_nodeid_gpuid
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM gpu_aggr_by_jobid_nodeid_gpuid WHERE jobid IN (SELECT jobid from gpu_current_jobid);
                   INSERT INTO gpu_aggr_by_jobid_nodeid_gpuid
                        SELECT jobid,nodeid,gpuid,MAX(ts),
                               %include "gpu_sql_aggrlist_smallset.yaml"
                               FROM gpu_by_jobid_nodeid_gpuid_ts
                               WHERE jobid IN (  SELECT jobid from gpu_current_jobid )
                               GROUP by jobid,nodeid,gpuid;
          archive:
            limit: max(gpulastts)-25h
        columns: 
          - { name: jobid,       type: jobid_t }
          - { name: nodeid,      type: nodeid_t  }
          - { name: gpuid,       type: nodeid_t  }
          - { name: gpulastts,   type: ts_t    }
          %include "gpu_sql_attrlist_smallset.yaml"

    - table:
        name: gpu_aggr_by_jobid
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM gpu_aggr_by_jobid WHERE jobid IN (SELECT jobid FROM gpu_current_jobid);
                   INSERT INTO gpu_aggr_by_jobid
                        ( jobid, gpulastts, gpu_ndps,
                          %include "gpu_sql_attrlist_insert.yaml"
                        )                        
                        SELECT jobid,MAX(ts),COUNT(TS),
                               %include "gpu_sql_aggraggrlist.yaml"
                               FROM gpu_aggr_by_jobid_ts
                               WHERE jobid IN (  SELECT jobid FROM gpu_current_jobid )
                               GROUP by jobid;
          archive:
            limit: max(gpulastts)-25h
        columns: 
          - { name: jobid,       type: jobid_t }
          - { name: gpulastts,   type: ts_t    }
          - { name: gpu_ndps,    type: count_t    }
          %include "gpu_sql_attrlist.yaml"


          
    - table:
        name: currentjobs_gpulist
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM currentjobs_gpulist;
                   INSERT INTO currentjobs_gpulist (jobid,gpulastts,gpulist)
                                                    SELECT jobid,gpulastts, 
                                                    GROUP_CONCAT(gpuid,' ') 
                                                    FROM gpu_aggr_by_jobid_nodeid_gpuid WHERE jobid
                                                         IN (select jobid from gpu_current_jobid)
                                                    GROUP by jobid
        columns: 
          - { name: jobid,           type: jobid_t }
          - { name: gpulist,         type: extralongstr_t  }
          - { name: gpulastts,       type: ts_t    }

    - table:
        name: currentjobs_gpuspec
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM currentjobs_gpuspec;
                   INSERT INTO currentjobs_gpuspec (jobid,gpuspec)
                                                    SELECT jobid, 
                                                    GROUP_CONCAT(gpuinfo,' ') 
                                                    FROM
                                                    (
                                                      SELECT jobid,
                                                      gpuid||":"||
                                                           round(gpu_util_avg,1)||"% "||
                                                           round(gpu_memu_avg/1024.0/1024.0/1024.0,1)||"GiB "||
                                                           round(gpu_sclk_avg,0)||"MHz "||
                                                           round(gpu_temp_avg,1)||"C|"
                                                             AS gpuinfo
                                                      FROM gpu_aggr_by_jobid_nodeid_gpuid
                                                      WHERE jobid IN (select jobid from gpu_current_jobid)
                                                      ORDER by gpuid
                                                    ) GROUP by jobid
        columns: 
          - { name: jobid,           type: jobid_t }
          - { name: gpuspec,         type: extralongstr_t  }
          
# only in sqlite > 3.8.3          
#                                                          PRINTF("%s:%5.1f%% %4.1fGiB %4.0fMHz %4.1fC|",
#                                                                gpuid,gpu_util_avg,
#                                                                gpu_memu_max/1024.0/1024.0/1024.0,
#                                                                gpu_clk_avg,
#                                                                gpu_temp_max)
          

    #----------------------------
    # temp. tables to speed joins 
    #----------------------------
    - table:
        name: gpu_jobmap_by_nd_ts
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM gpu_jobmap_by_nd_ts;
                   INSERT INTO gpu_jobmap_by_nd_ts
                        SELECT distinct jt.jobid,
                               jn.nodeid,
                               mintsinserted
                               FROM jobnodemap jn, jobtsmap jt
                               WHERE (jt.ts >= mintsinserted-59) AND (jt.jobid=jn.jobid);
          update_trigger:
        columns: 
          - { name: jobid,    type: jobid_t }
          - { name: nodeid,   type: nodeid_t }
          - { name: ts,       type: ts_t    }
    - table:
        name: gpu_current_jobid
        options:
          update:
            sql_update_contents:
              vars: mintsinserted
              sql: DELETE FROM gpu_current_jobid;
                   INSERT INTO gpu_current_jobid
                        SELECT jt.jobid
                               FROM jobtsmap jt
                               WHERE (jt.ts >= mintsinserted-59);
          update_trigger:
        columns: 
          - { name: jobid,    type: jobid_t }

# Remarks
# jobmap information is derived from LML data and not from LMLgpu data and
# can have therefore an earlier timestamp (up to 59sec before)


#    "power_usage"                            => "gpu_pu",  # in mW
#    "gpu_utilization_rate"                   => "gpu_util",
#    "mem_total_b"                            => "gpu_memt",
#    "mem_free_b"                             => "gpu_memf",
#    "mem_used_b"                             => "gpu_memu",
#    "mem_utilization_rate"                   => "gpu_memur",
#    "streaming_mp_clock"                     => "gpu_sclk",
#    "memory_clock"                           => "gpu_clk",
#    "clocks_throttle_reason"                 => "gpu_clkr",
#    "temperature"                            => "gpu_temp",
#    "pcie_throughput_tx_kbps"                => "gpu_pcie_tx"
#    "pcie_throughput_rx_kbps"                => "gpu_pcie_rx"


#AVG(throttled_perc),  AVG(gpu_unused)*(count(ts)>10)
#1.0*sum(gpu_util<0.1)/count(gpu_util)
#1.0*sum(gpu_clkr>1)/count(gpu_clkr),
#1.0*sum(gpu_util<0.1)/count(gpu_util)
#- { name: throttled_perc,       type: rate_t }
#- { name: score_perc,           type: rate_t }

